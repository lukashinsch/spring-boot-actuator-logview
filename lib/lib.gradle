buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
        classpath 'eu.hinsch:checked-exception-wrapper-gradle-plugin:0.1.1'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'eu.hinsch.checked-exception-wrapper'

ext {
    springBootVersion = '1.2.1.RELEASE'
    libVersion = '0.2.8'
}

jar {
    baseName = 'spring-boot-actuator-logview'
    version = libVersion
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-freemarker:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    compile("org.ocpsoft.prettytime:prettytime:3.2.7.Final")
    compile("commons-io:commons-io:2.4")
    compile("org.apache.commons:commons-compress:1.9")
    compile("com.codepoetics:protonpack:1.4")

    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")

    checkedExceptionWrapperGenerator("commons-io:commons-io:2.4:sources")
    checkedExceptionWrapperGenerator("org.apache.commons:commons-compress:1.9:sources")
}

sourceSets {
    main {
        java {
            srcDir 'src/generated/java'
        }
    }
}

javadoc {
    failOnError = false
    // TODO not working
    // exclude '**/generated/**'
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

test {
    jacoco {
        excludes = ['org.apache.*', '*Unchecked*']
    }
    testLogging {
        events "failed"
        exceptionFormat "full" // show assertion errors in build
    }
}

checkedExceptionWrapperGenerator {
    classes = ['org/apache/commons/io/IOUtils',
//               'org/apache/commons/io/FileUtils',
//               'org/apache/commons/compress/utils/IOUtils',
               'org/apache/commons/io/input/ReversedLinesFileReader']
    outputFolder = 'src/generated/java'
    generatedClassNameSuffix = ''
    generatedClassNamePrefix = 'Unchecked'
    runtimeExceptionClass = 'java.lang.RuntimeException'
    exceptionMessage = ''
}

// sign and publish to MC is done only locally so far

if (System.getenv('CI') != 'true') {

    apply plugin: 'signing'
    apply plugin: 'maven'

    group = 'eu.hinsch'
    version = libVersion

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from tasks.javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name 'spring-boot-actuator-logview'
                    packaging 'jar'
                    description 'simple logfile viewer as spring boot actuator endpoint'
                    url 'https://github.com/lukashinsch/spring-boot-actuator-logview/'

                    scm {
                        url 'scm:git@github.com:lukashinsch/spring-boot-actuator-logview.git'
                        connection 'scm:git@github.com:lukashinsch/spring-boot-actuator-logview.git'
                        developerConnection 'scm:git@github.com:lukashinsch/spring-boot-actuator-logview.git'
                    }

                    licenses {
                        license {
                            name 'MIT License'
                            url 'http://www.opensource.org/licenses/mit-license.php'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'lukashinsch'
                            name 'Lukas Hinsch'
                        }
                    }
                }
            }
        }
    }
}